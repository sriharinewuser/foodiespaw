{"ast":null,"code":"var _jsxFileName = \"E:\\\\foodiespaw\\\\frontend\\\\src\\\\hooks\\\\useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext } from 'react';\nimport * as userService from '../services/userService';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(userService.getUser());\n  const login = async (email, password) => {\n    try {\n      const user = await userService.login(email, password);\n      setUser(user);\n      toast.success('Login Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n  const register = async data => {\n    try {\n      const user = await userService.register(data);\n      setUser(user);\n      toast.success('Register Successful');\n    } catch (err) {\n      toast.error(err.response.data);\n    }\n  };\n  const logout = () => {\n    userService.logout();\n    setUser(null);\n    toast.success('Logout Successful');\n  };\n  const updateProfile = async user => {\n    const updatedUser = await userService.updateProfile(user);\n    toast.success('Profile Update Was Successful');\n    if (updatedUser) setUser(updatedUser);\n  };\n  const changePassword = async passwords => {\n    await userService.changePassword(passwords);\n    logout();\n    toast.success('Password Changed Successfully, Please Login Again!');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register,\n      updateProfile,\n      changePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"d433BNb37faEp65cAsZrPTk+Szo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","createContext","useContext","userService","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","getUser","login","email","password","success","err","error","response","data","register","logout","updateProfile","updatedUser","changePassword","passwords","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["E:/foodiespaw/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, createContext, useContext } from 'react';\r\nimport * as userService from '../services/userService';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(userService.getUser());\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const user = await userService.login(email, password);\r\n      setUser(user);\r\n      toast.success('Login Successful');\r\n    } catch (err) {\r\n      toast.error(err.response.data);\r\n    }\r\n  };\r\n\r\n  const register = async data => {\r\n    try {\r\n      const user = await userService.register(data);\r\n      setUser(user);\r\n      toast.success('Register Successful');\r\n    } catch (err) {\r\n      toast.error(err.response.data);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    userService.logout();\r\n    setUser(null);\r\n    toast.success('Logout Successful');\r\n  };\r\n\r\n  const updateProfile = async user => {\r\n    const updatedUser = await userService.updateProfile(user);\r\n    toast.success('Profile Update Was Successful');\r\n    if (updatedUser) setUser(updatedUser);\r\n  };\r\n\r\n  const changePassword = async passwords => {\r\n    await userService.changePassword(passwords);\r\n    logout();\r\n    toast.success('Password Changed Successfully, Please Login Again!');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, login, logout ,register,updateProfile,changePassword}}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAC3D,OAAO,KAAKC,WAAW,MAAM,yBAAyB;AACtD,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACG,WAAW,CAACU,OAAO,CAAC,CAAC,CAAC;EAEvD,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF,MAAML,IAAI,GAAG,MAAMR,WAAW,CAACW,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;MACrDJ,OAAO,CAACD,IAAI,CAAC;MACbP,KAAK,CAACa,OAAO,CAAC,kBAAkB,CAAC;IACnC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZd,KAAK,CAACe,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMD,IAAI,IAAI;IAC7B,IAAI;MACF,MAAMV,IAAI,GAAG,MAAMR,WAAW,CAACmB,QAAQ,CAACD,IAAI,CAAC;MAC7CT,OAAO,CAACD,IAAI,CAAC;MACbP,KAAK,CAACa,OAAO,CAAC,qBAAqB,CAAC;IACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZd,KAAK,CAACe,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBpB,WAAW,CAACoB,MAAM,CAAC,CAAC;IACpBX,OAAO,CAAC,IAAI,CAAC;IACbR,KAAK,CAACa,OAAO,CAAC,mBAAmB,CAAC;EACpC,CAAC;EAED,MAAMO,aAAa,GAAG,MAAMb,IAAI,IAAI;IAClC,MAAMc,WAAW,GAAG,MAAMtB,WAAW,CAACqB,aAAa,CAACb,IAAI,CAAC;IACzDP,KAAK,CAACa,OAAO,CAAC,+BAA+B,CAAC;IAC9C,IAAIQ,WAAW,EAAEb,OAAO,CAACa,WAAW,CAAC;EACvC,CAAC;EAED,MAAMC,cAAc,GAAG,MAAMC,SAAS,IAAI;IACxC,MAAMxB,WAAW,CAACuB,cAAc,CAACC,SAAS,CAAC;IAC3CJ,MAAM,CAAC,CAAC;IACRnB,KAAK,CAACa,OAAO,CAAC,oDAAoD,CAAC;EACrE,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAACqB,QAAQ;IACnBC,KAAK,EAAE;MAAElB,IAAI;MAAEG,KAAK;MAAES,MAAM;MAAED,QAAQ;MAACE,aAAa;MAACE;IAAc,CAAE;IAAAjB,QAAA,EAEpEA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,EAAA,CAhDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAkDzB,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMlC,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC6B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}